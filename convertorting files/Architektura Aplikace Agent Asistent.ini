Architektura Aplikace Agent Asistent

Tato architektura je navržena jako vícevrstvá webová aplikace s jasně oddělenými zodpovědnostmi jednotlivých komponent. Zahrnuje doporučené asynchronní zpracování pro náročnější úlohy konverze.

+--------------------------------+      +--------------------------------+      +-----------------------+
|     Web Browser (Uživatel)     |----->|    Flask Web Application       |----->|      AI Service       |
| (HTML, CSS, JavaScript)        |<-----|        (Backend - app.py)      |<-----|     (Gemini API)      |
+--------------------------------+      +-----------------------+--------+      +-----------------------+
       | ▲                                     | ▲      |          | ▲
       | | HTTP Requests/Responses             | |      |          | | API Volání
       | | (Upload, API volání)                | |      |          | | Výsledky AI
       | ▼                                     | |      |          | ▼
+--------------------------------+      | |      |      +-----------------------+
|         Frontend Logic         |      | |      |      | File Conversion Module|
|  (Upload handler, Editor UI,   |      | |      |      |  (`convertor` modul)  |
|   List view, State Mgmt)       |      | |      |      | (Python Library)      |
+--------------------------------+      | |      |      +-----------+-----------+
                                        | |      |                  | ▲
                                        | |      | Volání konverze  | | Výsledek konverze
      Uživatelská Vrstva                | |      |                  | ▼
----------------------------------------| |------|---------------------------------- Aplikační Vrstva
                                        | |      |
      Synchronní volání (jednodušší) ---> |      | <--- Čtení/Zápis dočasného souboru
                                        | |      |
      Nebo (doporučeno):                | ▼      ▼
      Asynchronní zpracování:   +-----------------------+      +-----------------------+
      1. Přidat úkol do fronty->| Task Queue (Broker)   |----->|   Celery/RQ Worker    |
                                | (e.g., Redis, RabbitMQ)|<-----| (Samostatný proces)   |
                                +-----------------------+      +----------+------------+
                                        ▲ |                            | ▲
                                        | |                            | | Volá konverzi
                                        | | Výsledek úkolu             | | Čte dočasný soubor
                                        | ▼                            | ▼
      2. Worker vezme úkol   +----------+------------+      +----------+------------+
                             |       Database          |      | Temporary File Storage|
                             | (SQLite / PostgreSQL)   |<---->| (Na serveru)          |
                             | - User Data             |<---->| - Nahrané soubory     |
                             | - Processed Documents   |      +-----------------------+
                             | - Session Data          |
                             | - Task Status           |
                             +-------------------------+
                                    ▲      ▲
                                    |______|
                                 Přístup k datům
                                (Backend & Worker)

                                                        ---------------------------------- Datová a Servisní Vrstva


Popis Komponent:

Uživatelská Vrstva (Client-Side):

Web Browser: Standardní prohlížeč, ve kterém uživatel interaguje s aplikací.

Frontend Logic (HTML, CSS, JS): Zodpovědný za:

Vykreslení uživatelského rozhraní (formuláře, seznamy, editory).

Zpracování uživatelských vstupů (kliknutí, vyplňování formulářů, nahrávání souborů).

Odesílání požadavků na backend (API volání přes Fetch/XHR).

Zobrazení dat přijatých z backendu.

Správa stavu na straně klienta (co se právě děje, načtená data).

Aplikační Vrstva (Server-Side):

Flask Web Application (Backend - app.py): Jádro aplikace. Zodpovědný za:

Zpracování HTTP požadavků (routing).

Autentizaci a autorizaci uživatelů (správa sessions/tokenů).

Validaci vstupních dat.

Orchestraci procesů (volání konverze, ukládání do DB).

Komunikaci s databází (přes ORM jako SQLAlchemy nebo přímo).

Poskytování RESTful API pro frontend.

Servírování statických souborů a HTML šablon.

Při asynchronním zpracování: Přidávání úkolů do fronty a případné sledování jejich stavu.

File Conversion Module (convertor): Refaktorizovaný modul (nyní jako Python knihovna). Zodpovědný za:

Přijetí cesty k souboru a typu požadovaného výstupu.

Načtení a parsování různých formátů souborů (PDF, DOCX, XLSX, obrázky...).

Volání externí AI služby (Gemini API) pro zpracování obsahu (strukturování, popis obrázků).

Vrácení zpracovaných dat (text, JSON) nebo chybového stavu.

Task Queue (Broker - např. Redis, RabbitMQ): Použito pouze při asynchronním zpracování. Slouží jako prostředník pro předávání zpráv (úkolů) mezi Flask aplikací a Workery.

Celery/RQ Worker: Použito pouze při asynchronním zpracování. Samostatný proces běžící na pozadí, který:

Naslouchá na nové úkoly ve frontě.

Vyzvedne úkol (např. "zkonvertuj soubor X").

Zavolá File Conversion Module.

Komunikuje s databází pro aktualizaci stavu úkolu a uložení výsledku.

Zpracovává chyby během konverze.

Datová a Servisní Vrstva:

AI Service (Gemini API): Externí služba poskytovaná Googlem, volaná modulem convertor pro pokročilé zpracování obsahu (vyžaduje API klíč).

Database (SQLite / PostgreSQL): Úložiště pro všechna perzistentní data:

Informace o uživatelích (účty, role).

Zpracované dokumenty (user_documents tabulka s obsahem, metadaty, user_id).

Stavy úkolů (pokud se používá asynchronní zpracování).

Data pro session management.

Poznámka: PostgreSQL je obecně robustnější pro produkční nasazení a nabízí lepší podporu pro JSON (typ JSONB).

Temporary File Storage: Místo na souborovém systému serveru, kam Flask aplikace (nebo Worker) dočasně ukládá nahrané soubory před a během zpracování. Tyto soubory by měly být po úspěšném zpracování a uložení výsledku do DB smazány.

Klíčové Toky Dat a Procesy:

Nahrání Souboru (Asynchronní):

Uživatel -> UI: Vybere soubor a klikne "Nahrát".

UI -> Flask App: Odešle soubor (POST request na /api/upload).

Flask App: Ověří uživatele, uloží soubor do Temporary File Storage, vytvoří záznam v Database (stav 'pending'), přidá úkol (task_id, file_path) do Task Queue.

Flask App -> UI: Vrátí odpověď (např. {"status": "processing", "task_id": 123}).

Worker: Vezme úkol z Task Queue.

Worker: Aktualizuje stav v Database na 'processing'.

Worker -> File Conversion Module: Zavolá funkci konverze s file_path.

File Conversion Module <-> AI Service: Volitelně volá AI pro zpracování.

File Conversion Module -> Worker: Vrátí výsledek (JSON/text) nebo chybu.

Worker: Uloží výsledek/chybu do Database (aktualizuje záznam podle task_id), změní stav na 'completed'/'error'. Smaže dočasný soubor.

UI: Periodicky se dotazuje Flask App (GET /api/documents/<task_id>/status) na stav.

Flask App: Čte stav z Database.

Flask App -> UI: Vrátí stav. Když je 'completed', UI načte výsledek a zobrazí ho v editoru.

Uložení Editovaného Obsahu:

Uživatel -> UI: Upraví obsah v editoru a klikne "Uložit".

UI -> Flask App: Odešle upravená data (PUT/PATCH request na /api/documents/<doc_id>).

Flask App: Ověří uživatele a vlastnictví dokumentu, validuje data, aktualizuje záznam v Database.

Flask App -> UI: Vrátí potvrzení o úspěchu.

Zobrazení Seznamu Dokumentů:

Uživatel -> UI: Přejde na stránku "Moje dokumenty".

UI -> Flask App: Odešle požadavek (GET /api/documents).

Flask App: Ověří uživatele, dotáže se Database na všechny dokumenty pro daného user_id.

Flask App -> UI: Vrátí seznam dokumentů (metadata).

UI: Zobrazí seznam.

Výhody této Architektury:

Modularita: Jednotlivé komponenty mají jasné zodpovědnosti a mohou být vyvíjeny a testovány nezávisle.

Oddělení Zájmů (Separation of Concerns): Frontend, backend a konverzní logika jsou oddělené.

Škálovatelnost (s Async): Asynchronní zpracování pomocí workerů umožňuje škálovat zpracování náročných úloh nezávisle na webové aplikaci (můžete přidat více workerů).

Responzivita (s Async): Webová aplikace zůstává responzivní i během dlouhotrvajících konverzí.

Flexibilita: Jednotlivé komponenty (např. databázi, AI službu, task queue) lze v budoucnu vyměnit nebo upgradovat s menším dopadem na zbytek systému.

Tato architektura poskytuje solidní základ pro robustní a škálovatelnou aplikaci Agent Asistent.